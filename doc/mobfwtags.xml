<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>Mobility Framework (MF) API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="class">
    <name>ActiveChannel</name>
    <filename>classActiveChannel.html</filename>
    <base>BBItem</base>
    <member kind="function">
      <type></type>
      <name>ActiveChannel</name>
      <anchorfile>classActiveChannel.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(unsigned c=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getActiveChannel</name>
      <anchorfile>classActiveChannel.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActiveChannel</name>
      <anchorfile>classActiveChannel.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned c)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classActiveChannel.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>channel</name>
      <anchorfile>classActiveChannel.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classActiveChannel.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlohaMacLayer</name>
    <filename>classAlohaMacLayer.html</filename>
    <base>BasicMacLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(AlohaMacLayer, BasicMacLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; MacPkt * &gt;</type>
      <name>MacQueue</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>States</name>
      <anchor>x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareSend</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>macState</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::States</type>
      <name>radioState</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catRadioState</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SingleChannelRadio *</type>
      <name>radio</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>queueLength</name>
      <anchorfile>classAlohaMacLayer.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANSimMobility</name>
    <filename>classANSimMobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ANSimMobility, LineSegmentsMobilityBase, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>extractDataFrom</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeId</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextPosChange</name>
      <anchorfile>classANSimMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicApplLayer</name>
    <filename>classBasicApplLayer.html</filename>
    <base>BasicModule</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BasicApplLayer, BasicModule, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const int</type>
      <name>myApplAddr</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z1_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z1_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z1_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z2_0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z2_1</anchor>
      <arglist>(cMessage *, double)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z0_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z0_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateOut</name>
      <anchorfile>classBasicApplLayer.html</anchorfile>
      <anchor>z0_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicDecider</name>
    <filename>classBasicDecider.html</filename>
    <base>BasicModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>z14_0</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>z14_1</anchor>
      <arglist>(AirFrame *, const SnrList &amp;)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>z13_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>z13_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicDecider.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BasicDecider, BasicModule, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicLayer</name>
    <filename>classBasicLayer.html</filename>
    <base>BasicModule</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BasicLayer, BasicModule, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z16_0</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z16_1</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z16_2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z16_3</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z17_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z17_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z17_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z15_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z15_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateIn</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z15_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowergateOut</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z15_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z15_4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>classBasicLayer.html</anchorfile>
      <anchor>z15_5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicMacLayer</name>
    <filename>classBasicMacLayer.html</filename>
    <base>BasicLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BasicMacLayer, BasicLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(MacPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MacPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMacAddr</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBasicMacLayer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicMobility</name>
    <filename>classBasicMobility.html</filename>
    <base>BasicModule</base>
    <member kind="enumeration">
      <name>BorderPolicy</name>
      <anchor>w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchor>w12w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchor>w12w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchor>w12w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchor>w12w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BasicMobilityMsgKinds</name>
      <anchor>w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BorderHandling</name>
      <anchor>w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOWHERE</name>
      <anchor>w14w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_SMALLER</name>
      <anchor>w14w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X_BIGGER</name>
      <anchor>w14w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_SMALLER</name>
      <anchor>w14w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y_BIGGER</name>
      <anchor>w14w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BasicMobility, BasicModule, 0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleBorderMsg</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeX</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>playgroundSizeY</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleIfOutside</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_0</anchor>
      <arglist>(BorderPolicy, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BorderHandling</type>
      <name>checkIfOutside</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_2</anchor>
      <arglist>(Coord, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goToBorder</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_3</anchor>
      <arglist>(BorderPolicy, BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reflectIfOutside</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_4</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;, Coord &amp;, double &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wrapIfOutside</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_5</anchor>
      <arglist>(BorderHandling, Coord &amp;, Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>z18_6</anchor>
      <arglist>(Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl *</type>
      <name>cc</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>hostPtr</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostMove</type>
      <name>move</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>moveCategory</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>updateInterval</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveMsg</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBasicMobility.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicModule</name>
    <filename>classBasicModule.html</filename>
    <base>ImNotifiable</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BasicModule, cSimpleModule, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logName</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>findHost</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getLogName</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Blackboard *</type>
      <name>bb</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>classBasicModule.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicSnrEval</name>
    <filename>classBasicSnrEval.html</filename>
    <base>ChannelAccess</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BasicSnrEval, ChannelAccess, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="enumeration">
      <name>BasicSnrMsgKinds</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z20_0</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z20_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z20_2</anchor>
      <arglist>(AirFrame *)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z20_3</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bufferMsg</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z21_0</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>unbufferMsg</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z21_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z21_2</anchor>
      <arglist>(AirFrame *, const SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z21_3</anchor>
      <arglist>(AirFrame *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z21_4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z21_5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>transmitterPower</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ActiveChannel</type>
      <name>channel</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catActiveChannel</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z19_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z19_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>z19_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>classBasicSnrEval.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BBItem</name>
    <filename>classBBItem.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual BBItem *</type>
      <name>parentObject</name>
      <anchorfile>classBBItem.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Bitrate</name>
    <filename>classBitrate.html</filename>
    <base>BBItem</base>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>classBitrate.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchorfile>classBitrate.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bitrate</name>
      <anchorfile>classBitrate.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double b=1000000)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classBitrate.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classBitrate.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classBitrate.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Blackboard</name>
    <filename>classBlackboard.html</filename>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Blackboard, cSimpleModule, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subscribe</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>z22_0</anchor>
      <arglist>(ImNotifiable *client, const BBItem *category, int scopeModuleId=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subscribe</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>z22_1</anchor>
      <arglist>(ImNotifiable *client, int category, int scopeModuleId=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>z22_2</anchor>
      <arglist>(ImNotifiable *client, int category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publishBBItem</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>z23_0</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCategory</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>z23_1</anchor>
      <arglist>(const BBItem *details)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Subscriber &gt;</type>
      <name>SubscriberVector</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; SubscriberVector &gt;</type>
      <name>ClientVector</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; const char * &gt;</type>
      <name>CategoryDescriptions</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>ParentVector</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ClientVector::iterator</type>
      <name>ClientVectorIter</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CategoryDescriptions::iterator</type>
      <name>DescriptionsIter</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ParentVector::iterator</type>
      <name>ParentVectorIter</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>x6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>categoryName</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>findAndCreateDescription</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(bool *isNewEntry, const BBItem *category)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillParentVector</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const BBItem *category, int cat)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientVector</type>
      <name>clientVector</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CategoryDescriptions</type>
      <name>categoryDescriptions</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParentVector</type>
      <name>parentVector</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextCategory</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classBlackboard.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;, const SubscriberVector &amp;)</arglist>
    </member>
    <class kind="class">Blackboard::Subscriber</class>
  </compound>
  <compound kind="class">
    <name>BlackboardAccess</name>
    <filename>classBlackboardAccess.html</filename>
    <base>ModuleAccess&lt; Blackboard &gt;</base>
  </compound>
  <compound kind="class">
    <name>BonnMotionFile</name>
    <filename>classBonnMotionFile.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Line</name>
      <anchorfile>classBonnMotionFile.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Line *</type>
      <name>getLine</name>
      <anchorfile>classBonnMotionFile.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int nodeId) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Line &gt;</type>
      <name>LineList</name>
      <anchorfile>classBonnMotionFile.html</anchorfile>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LineList</type>
      <name>lines</name>
      <anchorfile>classBonnMotionFile.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BonnMotionFileCache</name>
      <anchorfile>classBonnMotionFile.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFileCache</name>
    <filename>classBonnMotionFileCache.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const BonnMotionFile *</type>
      <name>getFile</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>instance</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BonnMotionFile &gt;</type>
      <name>BMFileMap</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseFile</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const char *filename, BonnMotionFile &amp;bmFile)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BMFileMap</type>
      <name>cache</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>inst</name>
      <anchorfile>classBonnMotionFileCache.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionMobility</name>
    <filename>classBonnMotionMobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBonnMotionMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BonnMotionMobility, LineSegmentsMobilityBase, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBonnMotionMobility.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>classBonnMotionMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classBonnMotionMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BonnMotionFile::Line *</type>
      <name>vecp</name>
      <anchorfile>classBonnMotionMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>vecpos</name>
      <anchorfile>classBonnMotionMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BurstApplLayer</name>
    <filename>classBurstApplLayer.html</filename>
    <base>TestApplLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classBurstApplLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BurstApplLayer, TestApplLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classBurstApplLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classBurstApplLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>burstSize</name>
      <anchorfile>classBurstApplLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelAccess</name>
    <filename>classChannelAccess.html</filename>
    <base>BasicModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToChannel</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg, double delay)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSendDirect</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelControl *</type>
      <name>cc</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostMove</type>
      <name>hostMove</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catHostMove</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classChannelAccess.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(ChannelAccess, BasicModule, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelControl</name>
    <filename>classChannelControl.html</filename>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ChannelControl, cSimpleModule, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerNic</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(cModule *, const Coord *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNicPos</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int, const Coord *oldPos, const Coord *newPos)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NicEntry::GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int, const Coord *)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int, int, const Coord *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, NicEntry * &gt;</type>
      <name>NicEntries</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicEntries &gt;</type>
      <name>RowVector</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; RowVector &gt;</type>
      <name>NicMatrix</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateConnections</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(NicEntries &amp;nmap, NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(unsigned oldX, unsigned oldY, unsigned newX, unsigned newY, int id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>increment</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>z24_0</anchor>
      <arglist>(unsigned max, unsigned src, unsigned *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>decrement</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>z24_1</anchor>
      <arglist>(unsigned max, unsigned src, unsigned *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>inRangeEuclid</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>z24_2</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>inRangeTorus</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>z24_3</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicMatrix</type>
      <name>nics</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendDirect</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistSquared</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>findDistance</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxX</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxY</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>classChannelControl.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CircleMobility</name>
    <filename>classCircleMobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(CircleMobility, BasicMobility, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>center</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>classCircleMobility.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClientApplLayer</name>
    <filename>classClientApplLayer.html</filename>
    <base>BasicApplLayer</base>
    <member kind="enumeration">
      <name>APPL_MSG_TYPES</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classClientApplLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ClientApplLayer, BasicApplLayer, 0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classClientApplLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstSpeedMobility</name>
    <filename>classConstSpeedMobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ConstSpeedMobility, BasicMobility, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepSize</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>z3_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSteps</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>z3_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step</name>
      <anchorfile>classConstSpeedMobility.html</anchorfile>
      <anchor>z3_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>classCoord.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double _x=0, double _y=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Coord &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Coord *pos)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator+=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>operator-=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const Coord &amp;b, const Coord &amp;playGround) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>n1</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator *</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>n2</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>n3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>n4</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classCoord.html</anchorfile>
      <anchor>n5</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSMAMacLayer</name>
    <filename>classCSMAMacLayer.html</filename>
    <base>BasicMacLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(CSMAMacLayer, BasicMacLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; MacPkt * &gt;</type>
      <name>MacQueue</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>States</name>
      <anchor>x4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleBackoff</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>macState</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::States</type>
      <name>radioState</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catRadioState</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catRSSI</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>busyRSSI</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slotDuration</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>difs</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SingleChannelRadio *</type>
      <name>radio</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>backoffTimer</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>minorMsg</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>txAttempts</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxTxAttempts</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>initialCW</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DroppedPacket</type>
      <name>droppedPacket</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catDroppedPacket</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>classCSMAMacLayer.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211</name>
    <filename>classDecider80211.html</filename>
    <base>BasicLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>dB2fraction</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>packetOk</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(double, int, double bitrate)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snirThreshold</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classDecider80211.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(Decider80211, BasicLayer, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DroppedPacket</name>
    <filename>classDroppedPacket.html</filename>
    <base>BBItem</base>
    <member kind="enumeration">
      <name>Reasons</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reasons</type>
      <name>getReason</name>
      <anchorfile>classDroppedPacket.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReason</name>
      <anchorfile>classDroppedPacket.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Reasons r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DroppedPacket</name>
      <anchorfile>classDroppedPacket.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Reasons r=NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classDroppedPacket.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Reasons</type>
      <name>reason</name>
      <anchorfile>classDroppedPacket.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classDroppedPacket.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrAndCollDecider</name>
    <filename>classErrAndCollDecider.html</filename>
    <base>SnrDecider</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classErrAndCollDecider.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(AirFrame *, const SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classErrAndCollDecider.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classErrAndCollDecider.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(ErrAndCollDecider, SnrDecider, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Flood</name>
    <filename>classFlood.html</filename>
    <base>SimpleNetwLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Flood, SimpleNetwLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Bcast &gt;</type>
      <name>cBroadcastList</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>notBroadcasted</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(NetwPkt *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>seqNum</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultTtl</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>plainFlooding</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cBroadcastList</type>
      <name>bcMsgs</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bcMaxEntries</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bcDelTime</name>
      <anchorfile>classFlood.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">Flood::Bcast</class>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>classFWMath.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(double dBm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>torDist</name>
      <anchorfile>classFWMath.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(double x1, double x2, double y1, double y2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GilbertElliotSnr</name>
    <filename>classGilbertElliotSnr.html</filename>
    <base>SnrEval</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanGood</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>meanBad</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stateChange</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classGilbertElliotSnr.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(GilbertElliotSnr, SnrEval, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HostMove</name>
    <filename>classHostMove.html</filename>
    <base>BBItem</base>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Coord &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>startPos</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>startTime</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>direction</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>speed</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classHostMove.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImNotifiable</name>
    <filename>classImNotifiable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classImNotifiable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImNotifiable</name>
      <anchorfile>classImNotifiable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearMobility</name>
    <filename>classLinearMobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(LinearMobility, BasicMobility, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>classLinearMobility.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSegmentsMobilityBase</name>
    <filename>classLineSegmentsMobilityBase.html</filename>
    <base>BasicMobility</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(LineSegmentsMobilityBase, BasicMobility, 0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNextMove</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>targetTime</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepTarget</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>stepSize</name>
      <anchorfile>classLineSegmentsMobilityBase.html</anchorfile>
      <anchor>z4_0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211</name>
    <filename>classMac80211.html</filename>
    <base>BasicLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Mac80211, BasicLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Mac80211Pkt * &gt;</type>
      <name>MacPktList</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; NeighborEntry &gt;</type>
      <name>NeighborList</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>timerType</name>
      <anchor>x13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchor>x14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndContentionTimer</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgNotForMe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(cMessage *af, double duration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgForMe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBroadcastMsg</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndTransmission</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndSifsTimer</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimeoutTimer</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNavTimer</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRTSframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDATAframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleACKframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCTSframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDATAframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b17</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendACKframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b18</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCTSframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b19</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRTSframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBROADCASTframe</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mac80211Pkt *</type>
      <name>encapsMsg</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b22</anchor>
      <arglist>(cMessage *netw)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b23</anchor>
      <arglist>(Mac80211Pkt *frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNewCycle</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>backoff</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>contentionWindow</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testMaxAttempts</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>timeOut</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b28</anchor>
      <arglist>(frameType_802_11 type, double br)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>packetDuration</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b29</anchor>
      <arglist>(double bits, double br)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>stateName</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b30</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b31</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>rtsCts</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b32</anchor>
      <arglist>(Mac80211Pkt *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>suspendContention</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>retrieveBitrate</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b34</anchor>
      <arglist>(int destAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNeighbor</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b35</anchor>
      <arglist>(Mac80211Pkt *af)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NeighborList::iterator</type>
      <name>findNeighbor</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b36</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NeighborList::iterator</type>
      <name>findOldestNeighbor</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myMacAddr</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nav</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>contention</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>endSifs</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::States</type>
      <name>radioState</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catRadioState</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MediumIndication::States</type>
      <name>medium</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catMedium</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>defaultBitrate</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catBitrate</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoBitrate</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>snrThresholds</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SingleChannelRadio *</type>
      <name>radio</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextIsBroadcast</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacPktList</type>
      <name>fromUpperLayer</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>longRetryCounter</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>shortRetryCounter</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>remainingBackoff</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rtsCtsThreshold</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delta</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>neighborhoodCacheSize</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>neighborhoodCacheMaxAge</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborList</type>
      <name>neighbors</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>switching</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fsc</name>
      <anchorfile>classMac80211.html</anchorfile>
      <anchor>p28</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Mac80211::NeighborEntry</class>
  </compound>
  <compound kind="class">
    <name>MacControlInfo</name>
    <filename>classMacControlInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>MacControlInfo</name>
      <anchorfile>classMacControlInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacControlInfo</name>
      <anchorfile>classMacControlInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int</type>
      <name>getNextHopMac</name>
      <anchorfile>classMacControlInfo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopMac</name>
      <anchorfile>classMacControlInfo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int addr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextHopMac</name>
      <anchorfile>classMacControlInfo.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassMobility</name>
    <filename>classMassMobility.html</filename>
    <base>BasicMobility</base>
    <member kind="enumeration">
      <name>MassMobilityMsgKinds</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MassMobility, BasicMobility, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeInterval</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeAngleBy</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentSpeed</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentAngle</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>step</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>classMassMobility.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MediumIndication</name>
    <filename>classMediumIndication.html</filename>
    <base>BBItem</base>
    <member kind="enumeration">
      <name>States</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MediumIndication</name>
      <anchorfile>classMediumIndication.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(States s=IDLE)</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>getState</name>
      <anchorfile>classMediumIndication.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classMediumIndication.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classMediumIndication.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>state</name>
      <anchorfile>classMediumIndication.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classMediumIndication.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModuleAccess</name>
    <filename>classModuleAccess.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ModuleAccess</name>
      <anchorfile>classModuleAccess.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classModuleAccess.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>classModuleAccess.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>p</name>
      <anchorfile>classModuleAccess.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetwControlInfo</name>
    <filename>classNetwControlInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>NetwControlInfo</name>
      <anchorfile>classNetwControlInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int addr=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetwControlInfo</name>
      <anchorfile>classNetwControlInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int</type>
      <name>getNetwAddr</name>
      <anchorfile>classNetwControlInfo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetwAddr</name>
      <anchorfile>classNetwControlInfo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int addr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>netwAddr</name>
      <anchorfile>classNetwControlInfo.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicControlType</name>
    <filename>classNicControlType.html</filename>
    <member kind="function">
      <type></type>
      <name>NicControlType</name>
      <anchorfile>classNicControlType.html</anchorfile>
      <anchor>z25_0</anchor>
      <arglist>(Types t=NOTHING)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classNicControlType.html</anchorfile>
      <anchor>z25_1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classNicControlType.html</anchorfile>
      <anchor>z25_2</anchor>
      <arglist>(Types t)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classNicControlType.html</anchorfile>
      <anchor>z25_3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Types</type>
      <name>type</name>
      <anchorfile>classNicControlType.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry</name>
    <filename>classNicEntry.html</filename>
    <member kind="typedef">
      <type>std::map&lt; int, cGate * &gt;</type>
      <name>GateList</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntry</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function">
      <type>const GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const NicEntry *other)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int to)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>nicPtr</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateList</type>
      <name>outConns</name>
      <anchorfile>classNicEntry.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDebug</name>
    <filename>classNicEntryDebug.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDebug</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDebug</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestInGate</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestOutGate</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inCnt</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outCnt</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>freeInGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>freeOutGates</name>
      <anchorfile>classNicEntryDebug.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDirect</name>
    <filename>classNicEntryDirect.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDirect</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDirect</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>classNicEntryDirect.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P2PPhyLayer</name>
    <filename>classP2PPhyLayer.html</filename>
    <base>ChannelAccess</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(P2PPhyLayer, ChannelAccess, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="enumeration">
      <name>P2PPhyKinds</name>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z7_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z7_1</anchor>
      <arglist>(AirFrame *, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z7_2</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>encapsMsg</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bufferMsg</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_1</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame *</type>
      <name>unbufferMsg</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendP2P</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_3</anchor>
      <arglist>(AirFrame *, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_4</anchor>
      <arglist>(AirFrame *, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_5</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedP2P</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_6</anchor>
      <arglist>(AirFrame *, double, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_7</anchor>
      <arglist>(AirFrame *, double, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedUp</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_8</anchor>
      <arglist>(AirFrame *, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z8_9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AirFrame *</type>
      <name>createCapsulePkt</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z9_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pBit</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>transmitterPower</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ActiveChannel</type>
      <name>channel</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catActiveChannel</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateOut</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z6_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uppergateIn</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z6_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>classP2PPhyLayer.html</anchorfile>
      <anchor>z6_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyControlInfo</name>
    <filename>classPhyControlInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyControlInfo</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const double br=0, const double s=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyControlInfo</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double</type>
      <name>getBitrate</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitrate</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const double br)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double</type>
      <name>getSnr</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSnr</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const double r)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>classPhyControlInfo.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PollApplLayer</name>
    <filename>classPollApplLayer.html</filename>
    <base>ClientApplLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(PollApplLayer, ClientApplLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, bool &gt;</type>
      <name>cAliveMap</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; int, int &gt;</type>
      <name>cNetwAddrMap</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>x1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>cAliveMap::iterator</type>
      <name>cAliveMapIterator</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>x2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBroadcast</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPoll</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pollNext</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numClients</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>aliveClients</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>broadcastInterval</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pollTimeout</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cAliveMap</type>
      <name>clients</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cNetwAddrMap</type>
      <name>clientAddrs</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cAliveMapIterator</type>
      <name>it</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>pollTimer</name>
      <anchorfile>classPollApplLayer.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioState</name>
    <filename>classRadioState.html</filename>
    <base>BBItem</base>
    <member kind="enumeration">
      <name>States</name>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>getState</name>
      <anchorfile>classRadioState.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classRadioState.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadioState</name>
      <anchorfile>classRadioState.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(States s=RECV)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classRadioState.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>state</name>
      <anchorfile>classRadioState.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classRadioState.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleMobility</name>
    <filename>classRectangleMobility.html</filename>
    <base>BasicMobility</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(RectangleMobility, BasicMobility, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeMove</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateXY</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x1</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y1</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x2</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y2</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner1</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner2</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner3</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner4</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>classRectangleMobility.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSSI</name>
    <filename>classRSSI.html</filename>
    <base>BBItem</base>
    <member kind="function">
      <type></type>
      <name>RSSI</name>
      <anchorfile>classRSSI.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double r=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRSSI</name>
      <anchorfile>classRSSI.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRSSI</name>
      <anchorfile>classRSSI.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>classRSSI.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>classRSSI.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BBITEM_METAINFO</name>
      <anchorfile>classRSSI.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(BBItem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleArp</name>
    <filename>classSimpleArp.html</filename>
    <base>BasicModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classSimpleArp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMacAddr</name>
      <anchorfile>classSimpleArp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int netwAddr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNetwAddr</name>
      <anchorfile>classSimpleArp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int macAddr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classSimpleArp.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(SimpleArp, BasicModule, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleNetwLayer</name>
    <filename>classSimpleNetwLayer.html</filename>
    <base>BasicLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(SimpleNetwLayer, BasicLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(NetwPkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NetwPkt *</type>
      <name>encapsMsg</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>z5_0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>z5_1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>z5_2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>z5_3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleArp *</type>
      <name>arp</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNetwAddr</name>
      <anchorfile>classSimpleNetwLayer.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleChannelRadio</name>
    <filename>classSingleChannelRadio.html</filename>
    <base>BasicModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>switchToSleep</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>switchToSend</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>switchToRecv</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setActiveChannel</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setBitrate</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>switchTo</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(RadioState::States, simtime_t delta)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState</type>
      <name>state</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stateCat</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ActiveChannel</type>
      <name>aChannel</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>aChannelCat</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bitrate</type>
      <name>bitrate</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bitrateCat</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>handlingTimer</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicModuleId</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>swSleep</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>z10_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>swSend</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>z10_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>swRecv</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>z10_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timer</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>z10_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classSingleChannelRadio.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(SingleChannelRadio, BasicModule, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrDecider</name>
    <filename>classSnrDecider.html</filename>
    <base>BasicDecider</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classSnrDecider.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(SnrDecider, BasicDecider, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSnrDecider.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>snrOverThreshold</name>
      <anchorfile>classSnrDecider.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const SnrList &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classSnrDecider.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(AirFrame *, const SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classSnrDecider.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThresholdLevel</name>
      <anchorfile>classSnrDecider.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrEval</name>
    <filename>classSnrEval.html</filename>
    <base>BasicSnrEval</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveBBItem</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int category, const BBItem *details, int scopeModuleId)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; AirFrame *, double &gt;</type>
      <name>cRecvBuff</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgEnd</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcRcvdPower</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calcPathloss</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(AirFrame *frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNewSnr</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handlePublish</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(RSSI *r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>modifySnrList</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(SnrList &amp;list)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(cMessage *m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SnrStruct</type>
      <name>snrInfo</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cRecvBuff</type>
      <name>recvBuff</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioState::States</type>
      <name>radioState</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catRadioState</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RSSI</type>
      <name>rssi</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catRSSI</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>publishRSSIAlways</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MediumIndication</type>
      <name>indication</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catIndication</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicModuleId</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>noiseLevel</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>recvTime</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>waveLength</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>thermalNoise</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlphaHalf</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playground</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catBitrate</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classSnrEval.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(SnrEval, BasicSnrEval, 0)</arglist>
    </member>
    <class kind="struct">SnrEval::SnrStruct</class>
  </compound>
  <compound kind="struct">
    <name>SnrEval::SnrStruct</name>
    <filename>structSnrEval_1_1SnrStruct.html</filename>
    <member kind="variable">
      <type>AirFrame *</type>
      <name>ptr</name>
      <anchorfile>structSnrEval_1_1SnrStruct.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rcvdPower</name>
      <anchorfile>structSnrEval_1_1SnrStruct.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SnrList</type>
      <name>sList</name>
      <anchorfile>structSnrEval_1_1SnrStruct.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SnrEval80211</name>
    <filename>classSnrEval80211.html</filename>
    <base>SnrEval</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classSnrEval80211.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(SnrEval80211, SnrEval, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSnrEval80211.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classSnrEval80211.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AirFrame80211 *</type>
      <name>encapsMsg</name>
      <anchorfile>classSnrEval80211.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>classSnrEval80211.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SnrListEntry</name>
    <filename>structSnrListEntry.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>time</name>
      <anchorfile>structSnrListEntry.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>snr</name>
      <anchorfile>structSnrListEntry.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestApplLayer</name>
    <filename>classTestApplLayer.html</filename>
    <base>BasicApplLayer</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TestApplLayer, BasicApplLayer, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBroadcast</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendReply</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(ApplPkt *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>classTestApplLayer.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestDecider</name>
    <filename>classTestDecider.html</filename>
    <base>BasicDecider</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classTestDecider.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TestDecider, BasicDecider, 0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>classTestDecider.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(AirFrame *, const SnrList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>classTestDecider.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestSnrEval</name>
    <filename>classTestSnrEval.html</filename>
    <base>BasicSnrEval</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classTestSnrEval.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TestSnrEval, BasicSnrEval, 0)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcDuration</name>
      <anchorfile>classTestSnrEval.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsgStart</name>
      <anchorfile>classTestSnrEval.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(AirFrame *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TurtleMobility</name>
    <filename>classTurtleMobility.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function">
      <type></type>
      <name>Module_Class_Members</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TurtleMobility, LineSegmentsMobilityBase, 0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fixIfHostGetsOutside</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resumeScript</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeStatement</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(cXMLElement *nextStatement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>gotoNextStatement</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>turtleScript</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextStatement</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BorderPolicy</type>
      <name>borderPolicy</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; long &gt;</type>
      <name>loopVars</name>
      <anchorfile>classTurtleMobility.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>applLayer</name>
    <title>applLayer - application layer modules</title>
    <filename>group__applLayer.html</filename>
    <class kind="class">BasicApplLayer</class>
    <class kind="class">BurstApplLayer</class>
    <class kind="class">ClientApplLayer</class>
    <class kind="class">PollApplLayer</class>
    <class kind="class">TestApplLayer</class>
  </compound>
  <compound kind="group">
    <name>netwLayer</name>
    <title>netwLayer - network layer modules</title>
    <filename>group__netwLayer.html</filename>
    <class kind="class">Flood</class>
    <class kind="class">SimpleArp</class>
    <class kind="class">SimpleNetwLayer</class>
  </compound>
  <compound kind="group">
    <name>nic</name>
    <title>nic - network interfaces</title>
    <filename>group__nic.html</filename>
    <subgroup>macLayer</subgroup>
    <subgroup>radios</subgroup>
    <subgroup>phyLayer</subgroup>
  </compound>
  <compound kind="group">
    <name>macLayer</name>
    <title>macLayer - MAC layer modules</title>
    <filename>group__macLayer.html</filename>
    <class kind="class">Mac80211</class>
    <class kind="class">BasicMacLayer</class>
    <class kind="class">AlohaMacLayer</class>
    <class kind="class">CSMAMacLayer</class>
  </compound>
  <compound kind="group">
    <name>radios</name>
    <title>radios - radio modules</title>
    <filename>group__radios.html</filename>
    <class kind="class">SingleChannelRadio</class>
  </compound>
  <compound kind="group">
    <name>phyLayer</name>
    <title>phyLayer - physical layer modules</title>
    <filename>group__phyLayer.html</filename>
    <subgroup>snrEval</subgroup>
    <subgroup>decider</subgroup>
    <class kind="class">P2PPhyLayer</class>
    <class kind="class">ChannelAccess</class>
  </compound>
  <compound kind="group">
    <name>snrEval</name>
    <title>snrEval - modules for attenuation and interference calculation</title>
    <filename>group__snrEval.html</filename>
    <class kind="class">GilbertElliotSnr</class>
    <class kind="class">SnrEval</class>
    <class kind="class">SnrEval80211</class>
    <class kind="class">TestSnrEval</class>
    <class kind="class">BasicSnrEval</class>
  </compound>
  <compound kind="group">
    <name>decider</name>
    <title>decider - decider modules</title>
    <filename>group__decider.html</filename>
    <class kind="class">Decider80211</class>
    <class kind="class">ErrAndCollDecider</class>
    <class kind="class">SnrDecider</class>
    <class kind="class">TestDecider</class>
    <class kind="class">BasicDecider</class>
  </compound>
  <compound kind="group">
    <name>mobility</name>
    <title>mobility - modules handling the mobility of the hosts</title>
    <filename>group__mobility.html</filename>
    <class kind="class">ANSimMobility</class>
    <class kind="class">BonnMotionFile</class>
    <class kind="class">BonnMotionFileCache</class>
    <class kind="class">BonnMotionMobility</class>
    <class kind="class">CircleMobility</class>
    <class kind="class">ConstSpeedMobility</class>
    <class kind="class">LinearMobility</class>
    <class kind="class">LineSegmentsMobilityBase</class>
    <class kind="class">MassMobility</class>
    <class kind="class">RectangleMobility</class>
    <class kind="class">TurtleMobility</class>
    <class kind="class">BasicMobility</class>
  </compound>
  <compound kind="group">
    <name>utils</name>
    <title>utils  -  utiltity classes</title>
    <filename>group__utils.html</filename>
    <class kind="class">Bitrate</class>
    <class kind="class">DroppedPacket</class>
    <class kind="class">MediumIndication</class>
    <class kind="class">NetwControlInfo</class>
    <class kind="class">RadioState</class>
    <class kind="class">RSSI</class>
    <class kind="class">ActiveChannel</class>
    <class kind="class">FWMath</class>
    <class kind="class">MacControlInfo</class>
    <class kind="class">ModuleAccess</class>
    <class kind="class">NicControlType</class>
    <class kind="struct">SnrListEntry</class>
    <member kind="function">
      <type>cModule *</type>
      <name>findModuleWherever</name>
      <anchorfile>group__utils.html</anchorfile>
      <anchor>ga0</anchor>
      <arglist>(const char *name, const char *classname, cModule *from)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>core</name>
    <title>core - core MF modules</title>
    <filename>group__core.html</filename>
    <subgroup>basicModules</subgroup>
    <subgroup>blackboard</subgroup>
    <subgroup>channelControl</subgroup>
    <subgroup>basicUtils</subgroup>
  </compound>
  <compound kind="group">
    <name>basicModules</name>
    <title>basicModules - basic module classes of the MF</title>
    <filename>group__basicModules.html</filename>
    <class kind="class">BasicDecider</class>
    <class kind="class">BasicLayer</class>
    <class kind="class">BasicMacLayer</class>
    <class kind="class">BasicMobility</class>
    <class kind="class">BasicModule</class>
    <class kind="class">BasicSnrEval</class>
    <class kind="class">ChannelAccess</class>
  </compound>
  <compound kind="group">
    <name>blackboard</name>
    <title>blackboard - blackboard related stuff</title>
    <filename>group__blackboard.html</filename>
    <class kind="class">Bitrate</class>
    <class kind="class">DroppedPacket</class>
    <class kind="class">MediumIndication</class>
    <class kind="class">RadioState</class>
    <class kind="class">RSSI</class>
    <class kind="class">Blackboard</class>
    <class kind="class">ImNotifiable</class>
    <class kind="class">BlackboardAccess</class>
    <class kind="class">BBItem</class>
    <class kind="class">ActiveChannel</class>
    <class kind="class">HostMove</class>
  </compound>
  <compound kind="group">
    <name>channelControl</name>
    <title>channelControl - channel and connection related classes</title>
    <filename>group__channelControl.html</filename>
    <class kind="class">ChannelAccess</class>
    <class kind="class">ChannelControl</class>
    <class kind="class">NicEntry</class>
    <class kind="class">NicEntryDebug</class>
    <class kind="class">NicEntryDirect</class>
  </compound>
  <compound kind="group">
    <name>basicUtils</name>
    <title>basicUtils - utitities for the core MF</title>
    <filename>group__basicUtils.html</filename>
    <class kind="class">ActiveChannel</class>
    <class kind="class">FWMath</class>
    <class kind="class">HostMove</class>
    <class kind="class">MacControlInfo</class>
    <class kind="class">ModuleAccess</class>
    <class kind="class">NicControlType</class>
    <class kind="struct">SnrListEntry</class>
    <member kind="typedef">
      <type>std::list&lt; SnrListEntry &gt;</type>
      <name>SnrList</name>
      <anchorfile>group__basicUtils.html</anchorfile>
      <anchor>ga0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>contrib/applLayer/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/applLayer/</path>
    <filename>dir_000006.html</filename>
    <file>BasicApplLayer.cc</file>
    <file>BasicApplLayer.h</file>
    <file>BurstApplLayer.cc</file>
    <file>BurstApplLayer.h</file>
    <file>ClientApplLayer.cc</file>
    <file>ClientApplLayer.h</file>
    <file>PollApplLayer.cc</file>
    <file>PollApplLayer.h</file>
    <file>TestApplLayer.cc</file>
    <file>TestApplLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>core/basicModules/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/core/basicModules/</path>
    <filename>dir_000007.html</filename>
    <file>BasicDecider.cc</file>
    <file>BasicDecider.h</file>
    <file>BasicLayer.cc</file>
    <file>BasicLayer.h</file>
    <file>BasicMacLayer.cc</file>
    <file>BasicMacLayer.h</file>
    <file>BasicMobility.cc</file>
    <file>BasicMobility.h</file>
    <file>BasicModule.cc</file>
    <file>BasicModule.h</file>
    <file>BasicSnrEval.cc</file>
    <file>BasicSnrEval.h</file>
  </compound>
  <compound kind="dir">
    <name>core/blackboard/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/core/blackboard/</path>
    <filename>dir_000009.html</filename>
    <file>Blackboard.cc</file>
    <file>Blackboard.h</file>
  </compound>
  <compound kind="dir">
    <name>core/channelControl/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/core/channelControl/</path>
    <filename>dir_000010.html</filename>
    <file>ChannelAccess.cc</file>
    <file>ChannelAccess.h</file>
    <file>ChannelControl.cc</file>
    <file>ChannelControl.h</file>
    <file>NicEntry.h</file>
    <file>NicEntryDebug.cc</file>
    <file>NicEntryDebug.h</file>
    <file>NicEntryDirect.cc</file>
    <file>NicEntryDirect.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/</path>
    <filename>dir_000002.html</filename>
    <dir>contrib/applLayer/</dir>
    <dir>contrib/mobility/</dir>
    <dir>contrib/netwLayer/</dir>
    <dir>contrib/nic/</dir>
    <dir>contrib/utils/</dir>
  </compound>
  <compound kind="dir">
    <name>core/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/core/</path>
    <filename>dir_000000.html</filename>
    <dir>core/basicModules/</dir>
    <dir>core/blackboard/</dir>
    <dir>core/channelControl/</dir>
    <dir>core/utils/</dir>
  </compound>
  <compound kind="dir">
    <name>doc/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/doc/</path>
    <filename>dir_000013.html</filename>
    <file>groups.h</file>
    <file>mainpage.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/nic/macLayer/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/nic/macLayer/</path>
    <filename>dir_000004.html</filename>
    <file>AlohaMacLayer.cc</file>
    <file>AlohaMacLayer.h</file>
    <file>CSMAMacLayer.cc</file>
    <file>CSMAMacLayer.h</file>
    <file>Mac80211.cc</file>
    <file>Mac80211.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/mobility/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/mobility/</path>
    <filename>dir_000005.html</filename>
    <file>ANSimMobility.cc</file>
    <file>ANSimMobility.h</file>
    <file>BonnMotionFileCache.cc</file>
    <file>BonnMotionFileCache.h</file>
    <file>BonnMotionMobility.cc</file>
    <file>BonnMotionMobility.h</file>
    <file>CircleMobility.cc</file>
    <file>CircleMobility.h</file>
    <file>ConstSpeedMobility.cc</file>
    <file>ConstSpeedMobility.h</file>
    <file>LinearMobility.cc</file>
    <file>LinearMobility.h</file>
    <file>LineSegmentsMobilityBase.cc</file>
    <file>LineSegmentsMobilityBase.h</file>
    <file>MassMobility.cc</file>
    <file>MassMobility.h</file>
    <file>RectangleMobility.cc</file>
    <file>RectangleMobility.h</file>
    <file>TurtleMobility.cc</file>
    <file>TurtleMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/netwLayer/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/netwLayer/</path>
    <filename>dir_000012.html</filename>
    <file>Flood.cc</file>
    <file>Flood.h</file>
    <file>SimpleArp.cc</file>
    <file>SimpleArp.h</file>
    <file>SimpleNetwLayer.cc</file>
    <file>SimpleNetwLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/nic/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/nic/</path>
    <filename>dir_000003.html</filename>
    <dir>contrib/nic/macLayer/</dir>
    <dir>contrib/nic/phyLayer/</dir>
    <dir>contrib/nic/radios/</dir>
  </compound>
  <compound kind="dir">
    <name>contrib/nic/phyLayer/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/nic/phyLayer/</path>
    <filename>dir_000011.html</filename>
    <file>Decider80211.cc</file>
    <file>Decider80211.h</file>
    <file>ErrAndCollDecider.cc</file>
    <file>ErrAndCollDecider.h</file>
    <file>GilbertElliotSnr.cc</file>
    <file>GilbertElliotSnr.h</file>
    <file>P2PPhyLayer.cc</file>
    <file>P2PPhyLayer.h</file>
    <file>SnrDecider.cc</file>
    <file>SnrDecider.h</file>
    <file>SnrEval.cc</file>
    <file>SnrEval.h</file>
    <file>SnrEval80211.cc</file>
    <file>SnrEval80211.h</file>
    <file>TestDecider.cc</file>
    <file>TestDecider.h</file>
    <file>TestSnrEval.cc</file>
    <file>TestSnrEval.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/nic/radios/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/nic/radios/</path>
    <filename>dir_000014.html</filename>
    <file>SingleChannelRadio.cc</file>
    <file>SingleChannelRadio.h</file>
  </compound>
  <compound kind="dir">
    <name>contrib/utils/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/contrib/utils/</path>
    <filename>dir_000008.html</filename>
    <file>Bitrate.h</file>
    <file>Consts80211.h</file>
    <file>DroppedPacket.h</file>
    <file>MediumIndication.h</file>
    <file>NetwControlInfo.h</file>
    <file>PhyControlInfo.h</file>
    <file>RadioState.h</file>
    <file>RSSI.h</file>
  </compound>
  <compound kind="dir">
    <name>core/utils/</name>
    <path>/home/willkomm/mf/mobility-fw2.0p3/core/utils/</path>
    <filename>dir_000001.html</filename>
    <file>ActiveChannel.h</file>
    <file>Coord.h</file>
    <file>CoreDebug.h</file>
    <file>FWMath.h</file>
    <file>HostMove.h</file>
    <file>MacControlInfo.h</file>
    <file>ModuleAccess.cc</file>
    <file>ModuleAccess.h</file>
    <file>NicControlType.h</file>
    <file>SimpleAddress.h</file>
    <file>SnrList.h</file>
  </compound>
</tagfile>
